[
["data-importing.html", "Chapter 4 Data importing 4.1 Enter data manually 4.2 Reading data from file using Import dataset in Rstudio 4.3 Data manipulation in a data frame 4.4 Reading file using read.table, read.csv, etc. 4.5 General procedure to read data into R: 4.6 Recommended workflow for EVERY project", " Chapter 4 Data importing There are many different ways to get data into R. You can enter data manually (see below), or semi-manually (see below). You can read data into R from a local file or a file on the internet. You can also use R to retrieve data from databases, local or remote. The most import thing is to read data set into R correctly. A dataset not read in correctly will never be analyzed or visualized correctly. 4.1 Enter data manually x &lt;- c(2.1, 3.1, 3.2, 5.4) sum(x) ## [1] 13.8 A &lt;- matrix( c(2, 4, 3, 1, 5, 7), # the data elements nrow = 2, # number of rows ncol = 3) # number of columns A # show the matrix ## [,1] [,2] [,3] ## [1,] 2 3 5 ## [2,] 4 1 7 x &lt;- scan() # Enter values from keyboard, separated by Return key. End by empty line. 2.1 ## [1] 2.1 3.1 ## [1] 3.1 4.1 ## [1] 4.1 Note that you can paste a column of numbers from Excel. 4.2 Reading data from file using Import dataset in Rstudio Before reading files into R, we often need to open the files to take a look. Notepad or WordPad that come with Windows is very limited (and sooo amateur)! Do not even think about using Microsoft Word! I strongly recommend that you install a powerful text editor such as NotePad++ (https://notepad-plus-plus.org/), or TextPad (https://www.textpad.com/). If you are a Mac user, try TextMate, TextWrangler etc. I use NotePad++ almost every day to look into data, and also write R programs, as it can highlight R commands based on R syntax. I even use a tool called NppToR (https://sourceforge.net/projects/npptor/) to send R commands from NotePad++ directly to R, and I love it! Regardless of their extensions in file names, all plain text files can be opened by these text editors. Plain text files only contain text without any formatting, links and images. The file names can be “poems.txt”, “poems.tex”, “students.csv”, or just “data” without extension. I often save my R scripts as text file with names like “code_1-22-2017.R”. You can import text files, regardless of file names, to Microsoft Excel, which can properly parse your file into columns if the correct delimiter is specified. Comma separated values (CSV) files, use comma to separate the columns. CSV files can also be conveniently opened by Excel. And Rstudio likes it too. So let’s try to use CSV files. Another common type is tab-delimitated text files, which uses the tab or \\(\\t\\) as it is invisible character. Other types of files such as Excel .xls or .xlsx files often needed to be saved as CSV files. Probably the most intuitive way to read data into Rstudio is to use the Import dataset function available at File-&gt;Import Dataset from the Rstudio menu. You can also click Import dataset button on the top-right of the Rstudio interface. The preferred format is CSV. But it is not required. You can open a text file with Excel, and save it as a CSV file. 1. Download data and read background information Download the heartatk4R.txt file from this page http://statland.org/R/RC/tables4R.htm. It is a tab-deliminated text file, meaning the different columns are separated by tab, hence the “\\(\\t\\)” above. 2. In Rstudio, click File-&gt;Import Dataset-&gt;From text(readr)…, find the file on your hard drive. You should change the Delimiter to “tab”, and the preview shows that the data is correctly parsed into multiple columns. You can also change the name of your data object by changing the default “heartatk4R” to “x” on the lower left of the import interface. See Figure 4.1. The awesome nerds at Rstudio actually helped you generating these 3 lines of code: library(readr) x &lt;- read_delim(&quot;datasets/heartatk4R.txt&quot;,&quot;\\t&quot;, escape_double = FALSE, trim_ws = TRUE) View(x) # shows the data, will change if you modify it. Before you click Import, I highly recommend that you select all the codes and copy it to your clipboard. After clicking Import, you can paste the code into a script window. If you do not have a script window open, you can create one by clicking the File + icon on the top left. Copy and paste these code to your script file. You will need it when you want to re-run the analysis without going through the above steps. You can see the data appears as a spreadsheet, which can be sorted by clicking on the column names. This spreadsheet can be closed. To reopen, click on x object, which is a data frame named after the input file. You data is now available as x. Figure 4.1: Importing data into R. Check data type. Most of the times, R can guess the type of data in each column. But we always need to double check using the str command. If not satisfied, we can enforce data type conversion in R using as.numeric, as.factor, or as.character functions. str(x) # structure of data object, data types for each column ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 12844 obs. of 8 variables: ## $ Patient : int 1 2 3 4 5 6 7 8 9 10 ... ## $ DIAGNOSIS: int 41041 41041 41091 41081 41091 41091 41091 41091 41041 41041 ... ## $ SEX : chr &quot;F&quot; &quot;F&quot; &quot;F&quot; &quot;F&quot; ... ## $ DRG : int 122 122 122 122 122 121 121 121 121 123 ... ## $ DIED : int 0 0 0 0 0 0 0 0 0 1 ... ## $ CHARGES : num 4752 3941 3657 1481 1681 ... ## $ LOS : chr &quot;0010&quot; &quot;0006&quot; &quot;0005&quot; &quot;0002&quot; ... ## $ AGE : chr &quot;079&quot; &quot;034&quot; &quot;076&quot; &quot;080&quot; ... ## - attr(*, &quot;spec&quot;)=List of 2 ## ..$ cols :List of 8 ## .. ..$ Patient : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ DIAGNOSIS: list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ SEX : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ DRG : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ DIED : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ CHARGES : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ LOS : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ AGE : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## ..$ default: list() ## .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_guess&quot; &quot;collector&quot; ## ..- attr(*, &quot;class&quot;)= chr &quot;col_spec&quot; Note that the first column is just patient id number runs from 1 to 12844. It will not be useful in our analysis. The numbers in DIAGNOSIS, DRG, and DIED are integers but they actually code for certain categories. They are not measurements. It does not make sense, for example, to add them or average them. Most of the times, there is no particular order. The same is true for SEX. We need to reformat these columns as factors. We are going to use x$SEX to refer to the SEX column of the data frame x: x$DIAGNOSIS &lt;- as.factor(x$DIAGNOSIS) # convert this column to factor x$SEX &lt;- as.factor(x$SEX) x$DRG &lt;- as.factor(x$DRG) x$DIED &lt;- as.factor(x$DIED) Now the last three columns are actually numeric measurements. But the LOS and AGE were actually read as characters, due the fact that 10 is recorded as 0010. x$LOS &lt;- as.numeric(x$LOS) # convert to numeric x$AGE &lt;- as.numeric(x$AGE) str(x) # double check structure of data ## Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 12844 obs. of 8 variables: ## $ Patient : int 1 2 3 4 5 6 7 8 9 10 ... ## $ DIAGNOSIS: Factor w/ 9 levels &quot;41001&quot;,&quot;41011&quot;,..: 5 5 9 8 9 9 9 9 5 5 ... ## $ SEX : Factor w/ 2 levels &quot;F&quot;,&quot;M&quot;: 1 1 1 1 2 2 1 1 2 1 ... ## $ DRG : Factor w/ 3 levels &quot;121&quot;,&quot;122&quot;,&quot;123&quot;: 2 2 2 2 2 1 1 1 1 3 ... ## $ DIED : Factor w/ 2 levels &quot;0&quot;,&quot;1&quot;: 1 1 1 1 1 1 1 1 1 2 ... ## $ CHARGES : num 4752 3941 3657 1481 1681 ... ## $ LOS : num 10 6 5 2 1 9 15 15 2 1 ... ## $ AGE : num 79 34 76 80 55 84 84 70 76 65 ... ## - attr(*, &quot;spec&quot;)=List of 2 ## ..$ cols :List of 8 ## .. ..$ Patient : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ DIAGNOSIS: list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ SEX : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ DRG : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ DIED : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_integer&quot; &quot;collector&quot; ## .. ..$ CHARGES : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_double&quot; &quot;collector&quot; ## .. ..$ LOS : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## .. ..$ AGE : list() ## .. .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_character&quot; &quot;collector&quot; ## ..$ default: list() ## .. ..- attr(*, &quot;class&quot;)= chr &quot;collector_guess&quot; &quot;collector&quot; ## ..- attr(*, &quot;class&quot;)= chr &quot;col_spec&quot; summary(x) # a summary often gives us a lot of useful information ## Patient DIAGNOSIS SEX DRG DIED ## Min. : 1 41091 :5213 F:5065 121:5387 0:11434 ## 1st Qu.: 3212 41041 :2665 M:7779 122:6047 1: 1410 ## Median : 6422 41011 :1824 123:1410 ## Mean : 6422 41071 :1703 ## 3rd Qu.: 9633 41001 : 467 ## Max. :12844 41081 : 287 ## (Other): 685 ## CHARGES LOS AGE ## Min. : 3 Min. : 0.000 Min. : 20.00 ## 1st Qu.: 5422 1st Qu.: 4.000 1st Qu.: 57.00 ## Median : 8445 Median : 7.000 Median : 67.00 ## Mean : 9879 Mean : 7.569 Mean : 66.29 ## 3rd Qu.:12569 3rd Qu.:10.000 3rd Qu.: 77.00 ## Max. :47910 Max. :38.000 Max. :103.00 ## NA&#39;s :699 The summary( ) function is very useful to get basic information about data frames. Note that for numeric columns we are shown mean, median, etc, while for factors the frequencies are shown. This reassured us that the data types are correctly recognized. It also shows missing values for CHARGES. Some people got free treatment for heart attack? Maybe not. Missing does not mean zero. Maybe the data was not entered for some patients. Except enforcing data type conversion by as.factor, as.numeric and so on, We can also reformat the columns before clicking Import: After locating the file, you can click on the automatically detected data type under each of the column names as shown in Figure 4.2. By selecting “Factor” from the drop down and enter all possible levels separated by commas, you can successfully format this column as a factor. Figure 4.2: Changing data types while importing data into Rstudio. But if the column has too many levels, it is trouble to type in manually. We can read the column in as character first and then do as.facter conversion. 4.3 Data manipulation in a data frame We can sort the data by age. Again, type these commands in the script window, instead of directly into the Console window. And save the scripts once a while. x &lt;- x[order(x$AGE), ] # sort by ascending order by AGE Global Environment window contains the names and sizes of all the variables or objects in the computer memory. R programming is all about creating and modifying these objects in the memory with clear, step-by-step instructions. We also can sort the data by clicking on the column names in spreadsheet from Global Environment. Just like in Excel, you can add a new column with computed results: x$pdc &lt;- x$CHARGES / x$LOS Here we created a new column pdc to represent per day cost. We can also create a column to represent age groups using the floor function just returns the integer part. x$ag &lt;- floor(x$AGE/10) * 10 You can now do things like this: boxplot(x$CHARGES ~ x$ag) Each box represents an age group. Older patients tends to stay longer in the hospital after being admitted for heart attack. You can extract a subset of cases: x2 &lt;- subset(x, SEX == &quot;F&quot;) # Only females. “==” is for comparison and “=” is for assign value. x3 &lt;- subset(x, AGE &gt; 80) # only people older than 80 summary(x3) ## Patient DIAGNOSIS SEX DRG DIED ## Min. : 6 41091 :928 F:1263 121:1056 0:1518 ## 1st Qu.: 3527 41071 :347 M: 785 122: 462 1: 530 ## Median : 6834 41011 :280 123: 530 ## Mean : 6633 41041 :275 ## 3rd Qu.: 9734 41001 : 78 ## Max. :12844 41081 : 58 ## (Other): 82 ## CHARGES LOS AGE pdc ## Min. : 92 Min. : 1.000 Min. : 81.00 Min. : 18.4 ## 1st Qu.: 5155 1st Qu.: 5.000 1st Qu.: 82.00 1st Qu.: 833.9 ## Median : 8326 Median : 8.000 Median : 85.00 Median : 1133.7 ## Mean :10135 Mean : 9.131 Mean : 85.64 Mean : 1363.7 ## 3rd Qu.:13369 3rd Qu.:12.000 3rd Qu.: 88.00 3rd Qu.: 1530.0 ## Max. :46915 Max. :38.000 Max. :103.00 Max. :11246.1 ## NA&#39;s :115 NA&#39;s :115 ## ag ## Min. : 80.00 ## 1st Qu.: 80.00 ## Median : 80.00 ## Mean : 81.81 ## 3rd Qu.: 80.00 ## Max. :100.00 ## Try not to attach the data when you are manipulation data like this. Exercise 4.1 Generate a histogram of cost per day for middle-aged men aged between 40 and 60. Hint: subset your data step by step. 4.4 Reading file using read.table, read.csv, etc. As you get more experience with R programming, there are many other options to import data. Create a new project folder by File-&gt;New Project-&gt;New Directory-&gt;Empty Project and then create a new folder. Download and save the heartatk4R.txt file to that new folder. That folder becomes your default working directory. Now you can read the data by yourself. heartatk4R &lt;- read.table(&quot;datasets/heartatk4R.txt&quot;, header = TRUE, sep = &quot;\\t&quot;) Then we can repeat the above commands to check and adjust data types for the columns, using str(), as.factor(), and as.numeric() functions. In summary, we have the following code to read in the data. # Reading the heart attack dataset. I am not using the Import Dataset in Rstudio. # We have to make sure the file is in the current working directory # To set working directory from Rstudio main menu, go to Session -&gt; Set Working Directory rm(list = ls()) # Erase all objects in memory getwd() # show working directory x &lt;- read.table(&quot;datasets/heartatk4R.txt&quot;, sep=&quot;\\t&quot;, header = TRUE) head(x) # show the first few rows # change several columns to factors x$DRG &lt;- as.factor(x$DRG) x$DIED &lt;- as.factor(x$DIED) x$DIAGNOSIS &lt;- as.factor(x$DIAGNOSIS) x$SEX &lt;- as.factor(x$SEX) str(x) # show the data types of columns summary(x) # show summary of dataset Alternatively, you can skip all of the above and do this. x &lt;- read.table(&quot;http://statland.org/R/RC/heartatk4R.txt&quot;, header = TRUE, sep = &quot;\\t&quot;, colClasses = c(&quot;character&quot;, &quot;factor&quot;, &quot;factor&quot;, &quot;factor&quot;, &quot;factor&quot;, &quot;numeric&quot;, &quot;numeric&quot;, &quot;numeric&quot;)) We are reading data directly from the internet with the URL. And we are specifying the data type for each column. Exercise 4.2 Type in Table 4.1 in Excel and save as a CSV file. Create a new Rstudio project as outlined above. Create a script file with comments and starting scripts, including the rm(ls()) and getwd() command. Copy the CSV file to the new folder. Import to Rstudio. Convert data types. Copy the generated R code similar to those shown in Figure 4.2 into the script file. Submit your R code and the results from the str(patients) function to show the data structure and head(patients) to show the data. Table 4.1: An example of a multivariate dataset. LastName Age Sex BloodPressure Weight HeartAttack Smith 19 M 100 130.2 1 Bird 55 F 86 300 0 Wilson 23 M 200+ 212.7 0 4.5 General procedure to read data into R: If data is compressed, unzip using 7-zip, WinRAR, Winzip, gzip. Any of these will do. Is it a text file (CSV, txt, …) or Binary file (XLS, XLSX, …)? Convert binary to text file using corresponding application. Comma separated values (CSV) files, use comma to separate the columns. Another common type is tab-delimitated text files, which uses the tab or \\(\\t\\) as it is invisible character. Open with a text editor (TexPad, NotePad++) to have a look. Rows and columns? Row and column names? row.names = 1 header = T Deliminaters between columns?(space, comma, tab…) sep = “\\(\\t\\)” Missing values? NA, na, NULL, blank, NaN, 0 missingstring = Open as text file in Excel, choose appropriate deliminater while importing, or use the Text to Column under Data in Excel. Beware of the annoying automatic conversion in Excel “OCT4”-&gt;“4-OCT”. Edit column names by removing spaces, or shorten them for easy of reference in R. Save as CSV for reading in R. Change working directory to where the file was saved. Main menu: File-&gt;Change dir… read.table ( ), or read.csv( ). For example, x &lt;- read.table(“somefile.txt”, sep = “\\(\\t\\)”, header = TRUE, missingstring = “NA”) Double check the data with str( x ), make sure each column is recognized correctly as “character”, “factor” and “numeric”. Pay attention to columns contain numbers but are actually IDs (i.e. student IDs), these should be treated as character. For example, x $ ids &lt;- as.character(x $ ids), here x is the data frame and ids is the column name. Also pay attention to columns contain numbers but actually codes for some discrete categories (1, 2, 3, representing treatment 1, treatment 2 and treatment 3). These need to be reformatted as factors. This could be done with something like x $ treatment &lt;- as.factor(x $ treatment). Refresher using cheat sheets that summarize many R functions is available here: https://www.rstudio.com/resources/cheatsheets/. It is important to know the different types of R objects: scalars, vectors, data frames, matrix, and lists. 4.6 Recommended workflow for EVERY project It is best to create a separate folder that contains all related files. You can do the same for research projects. In Rstudio, this is called a Project. 1. Create a project in a new folder. I recommend you to start by setting up a project in a new folder by going to File-&gt;New project-&gt;New Directory-&gt;Empty Project. Then choose where the directory will be created on your hard drive. I created a directory called “learnR” under “C:\\Ge working \\ RBook” . Rstudio creates a Project file named like “learnR.Rproj”, which contains information such as scripts files and working folders. Projects files can be saved and later opened from File-&gt;Open. You get everything ready to go on a particular assignment or research project. Copy required data files to the new directory. From Windows or Mac operation systems, you can now copy all required data files to the directory just created. Creating a script file. Once you have a new project created, the first step is to start a new script file by clicking the File + button or go to File-&gt;New file and choose R script file. By default, the script file is called Untitled1.R. Rstudio will ask you to change it the first time you hit “Save” button . Start your R script by adding comments on background information. Comments starting with “#” are ignored by R when running, but they are helpful for humans, including yourself, to understand the code. We re-cycle and re-use our codes over and over, so it is vital to add information about what a chunk of code does. Figure 4.3 shows a recommended workflow for beginning your script. Write your scripts while saving your project files. If you click on the Run button, Rstudio runs the current line of code where your cursor is located. You can also select multiple lines and run them at once. You can jump back and forth but remember you are operating on the data objects sequentially. So sometimes you want to get a fresh start by running the reset line, namely:rm(list=ls()). This command lists and then deletes all data objects from R’s brain. As you develop your coding skills, following these guidelines can make you more efficient. Remember to save everything once a while by hitting the Save button on the main icon bar! Even though Rstudio saves your scripts every 5 seconds, it can crash. Figure 4.3: Beginning a project in Rstudio, a recommended workflow: commenting, resetting, checking working folder. "]
]
